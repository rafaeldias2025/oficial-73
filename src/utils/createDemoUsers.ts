import { supabase } from '@/integrations/supabase/client';

const nomesFict√≠cios = [
  'Ana Silva', 'Carlos Santos', 'Maria Costa', 'Jo√£o Ferreira', 'Paula Oliveira',
  'Roberto Silva', 'Fernanda Lima', 'Pedro Almeida', 'Juliana Rocha', 'Rafael Mendes',
  'Camila Souza', 'Diego Barbosa', 'Larissa Pereira', 'Thiago Martins', 'Bianca Cardoso',
  'Lucas Rodrigues', 'Mariana Gomes', 'Bruno Nascimento', 'Gabriela Freitas', 'Vinicius Torres'
];

const cidadesBrasil = [
  'S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Bras√≠lia',
  'Fortaleza', 'Curitiba', 'Recife', 'Porto Alegre', 'Manaus',
  'Bel√©m', 'Goi√¢nia', 'Guarulhos', 'Campinas', 'S√£o Lu√≠s',
  'S√£o Gon√ßalo', 'Macei√≥', 'Duque de Caxias', 'Natal', 'Teresina'
];

const achievementsSample = [
  ['primeiro_login', 'sequencia_7_dias'],
  ['meta_peso', 'consistente'],
  ['super_pontuacao', 'lider_semanal'],
  ['transformacao_completa'],
  ['mentor', 'inspirador'],
  ['disciplinado', 'perseverante'],
  ['inovador', 'criativo'],
  ['colaborativo', 'motivador']
];

const createDemoUsers = async (quantidade = 20) => {

const nomesFict√≠cios = [
  'Ana Silva', 'Carlos Santos', 'Maria Costa', 'Jo√£o Ferreira', 'Paula Oliveira',
  'Roberto Silva', 'Fernanda Lima', 'Pedro Almeida', 'Juliana Rocha', 'Rafael Mendes',
  'Camila Souza', 'Diego Barbosa', 'Larissa Pereira', 'Thiago Martins', 'Bianca Cardoso',
  'Lucas Rodrigues', 'Mariana Gomes', 'Bruno Nascimento', 'Gabriela Freitas', 'Vinicius Torres'
];

const cidadesBrasil = [
  'S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Bras√≠lia',
  'Fortaleza', 'Curitiba', 'Recife', 'Porto Alegre', 'Manaus',
  'Bel√©m', 'Goi√¢nia', 'Guarulhos', 'Campinas', 'S√£o Lu√≠s',
  'S√£o Gon√ßalo', 'Macei√≥', 'Duque de Caxias', 'Natal', 'Teresina'
];

const achievementsSample = [
  ['primeiro_login', 'sequencia_7_dias'],
  ['meta_peso', 'consistente'],
  ['super_pontuacao', 'lider_semanal'],
  ['transformacao_completa'],
  ['mentor', 'inspirador'],
  ['disciplinado', 'perseverante'],
  ['inovador', 'criativo'],
  ['colaborativo', 'motivador']
];

  console.log(`üé≠ Criando ${quantidade} usu√°rios reais para demonstra√ß√£o...`);
  try {
    // Criar usu√°rios reais na tabela de autentica√ß√£o do Supabase
    const createdUsers = [];
    for (let i = 0; i < quantidade; i++) {
      const nome = nomesFict√≠cios[i % nomesFict√≠cios.length];
      const email = `${nome.toLowerCase().replace(/ /g, '.')}.${Math.floor(Math.random()*10000)}@demo.com`;
      const password = 'demo1234';
      // Cria usu√°rio real
      const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
        email,
        password,
        email_confirm: true,
        user_metadata: {
          full_name: nome,
          role: 'client',
        }
      });
      if (authError) {
        console.error('Erro ao criar usu√°rio real:', authError);
        continue;
      }
      createdUsers.push(authUser.user);
    }

    // Criar profiles vinculados aos usu√°rios reais
    const profilesData = createdUsers.map((user, index) => ({
      user_id: user.id,
      full_name: user.user_metadata?.full_name || nomesFict√≠cios[index],
      email: user.email,
      role: 'client' as 'client',
    }));
    const { error: profilesError } = await supabase
      .from('profiles')
      .upsert(profilesData, { onConflict: 'user_id' });
    if (profilesError) throw profilesError;

    // Criar pontos, miss√µes e pontua√ß√µes di√°rias como antes, mas usando os IDs reais
    // ...existing code for points, missions, scores, etc. (igual ao anterior, s√≥ mudando para createdUsers)

    console.log('üéâ Usu√°rios reais criados com sucesso!');
    return { success: true, count: createdUsers.length };
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rios reais:', error);
    throw error;
  }
};

// Removido export duplicado para evitar erro

export { createDemoUsers };

// Fun√ß√£o para limpar usu√°rios demo (se necess√°rio)
export const cleanDemoUsers = async () => {
  console.log('üßπ Limpando usu√°rios fict√≠cios...');
  
  try {
    // Deletar em cascata: pontua√ß√µes -> miss√µes -> pontos -> profiles
    const { error: scoresError } = await supabase
      .from('pontuacao_diaria')
      .delete()
      .like('user_id', 'demo_user_%');

    const { error: missionsError } = await supabase
      .from('missao_dia')
      .delete()
      .in('user_id', (await supabase.from('profiles').select('id').like('user_id', 'demo_user_%')).data?.map(p => p.id) || []);

    const { error: pointsError } = await supabase
      .from('user_points')
      .delete()
      .in('user_id', (await supabase.from('profiles').select('id').like('user_id', 'demo_user_%')).data?.map(p => p.id) || []);

    const { error: profilesError } = await supabase
      .from('profiles')
      .delete()
      .like('user_id', 'demo_user_%');

    if (scoresError || missionsError || pointsError || profilesError) {
      console.warn('Alguns erros durante limpeza:', { scoresError, missionsError, pointsError, profilesError });
    }

    console.log('‚úÖ Usu√°rios fict√≠cios removidos');
    return { success: true };

  } catch (error) {
    console.error('‚ùå Erro ao limpar usu√°rios fict√≠cios:', error);
    throw error;
  }
}; 